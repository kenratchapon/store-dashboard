// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//npx prisma generate
//npx prisma db push

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store{
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Billboard{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  product Product[] @relation("CategoryToProduct")
  name String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
 model Size{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize",fields: [storeId], references: [id])
  products Product[] @relation("SizeToProduct")
  name String
  value String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
 }

  model Color{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor",fields: [storeId], references: [id])
  products Product[] @relation("ColorToProduct")
  name String
  value String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
 }

 model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation("SizeToProduct", fields: [sizeId], references: [id])
  colorId String
  color Color @relation("ColorToProduct", fields: [colorId], references: [id])
  images Image[] @relation("ProductToImage")
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
 }

 model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation("ProductToImage",fields: [productId],references: [id], onDelete: Cascade)
  url String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([productId])
 }